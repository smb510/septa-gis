var getFoursquare = function() {

		var center = window.superSpecialMap.getCenter();
		$.ajax({
			url: "/venues?lat=" + center.lat + "&long=" + center.lng,
			context: window.superSpecialMap,
			success: function(data, textStatus, jqXHR) {

				var fourIcon = new L.icon({
				//	iconUrl: < %= '"' + image_path("foursquare-icon.png") + '"' %> ,
					iconSize: [24, 24]

				});
				var map = window.superSpecialMap;
				var places = data["groups"][0];
				places.items.forEach(function(object, index, array) {

					var location = L.marker(new L.LatLng(object.location.lat, object.location.lng), {
						icon: fourIcon
					}).bindLabel(object.name + "->" + object.stats.checkinsCount);
					map.addLayer(location);

				});



			}
		})



	}

$(document).ready(function() {
	var map = L.map("map_canvas").setView([39.95, -75.2], 9)
	L.tileLayer('http://{s}.tile.cloudmade.com/72C96B4D077B45E7BDCF70917FE311DB/997/256/{z}/{x}/{y}.png', {
		attribution: 'Map data &copy; OpenStreetMap',
		maxZoom: 18
	}).addTo(map);



	//map.on('move', reloadPoints);
	//map.on('zoom', reloadPoints);
	window.superSpecialMap = map;
	window.currentMarkers = [];
	//add the incident points
	$.ajax({
		url: "/incidents",
		context: map
	}).success(function(d, t, j) {
		window.superSpecialData = d;
		var bounds = window.superSpecialMap.getBounds();
		var merkers = new L.MarkerClusterGroup();
		d.forEach(function(obj, index, array) {
			if (obj.arrest !== true && obj.YCoord !== null && obj.XCoord !== null && bounds.contains(new L.LatLng(obj.YCoord, obj.XCoord))) {


				if (obj.time != null) {
					var date = obj.time.split("T");
				} else {
					date = ["date was null", "time was null"]
				}
				var marker = L.marker([obj.YCoord, obj.XCoord]).bindLabel("On " + date[0] + " at " + date[1].replace("Z", ""));
				merkers.addLayer(marker);
				window.currentMarkers.push(marker);
			}
		});
		window.superSpecialMap.addLayer(merkers);
		$("#layers").html(window.superSpecialMap.layers)
	});

	// add the rail lines
	$.getScript("lines.json", function() {
		var astyle = {
			"color": "#990000",
			"weight": 2,
			"opacity": 1
		}

		var layer = L.geoJson(lines, {
			style: astyle
		}).addTo(window.superSpecialMap);

	})



	$('#graph1').tufteBar({
	    data: [
	      // First element is the y-value
	      // Other elements are arbitary - they are not used by the lib
	      // but are passed back into callback functions
	      [100, {label: 'Baseline'}],
	      [76.9, {label: 'Schools'}],
		  [55.3, {label: 'Offices'}],
		  [88.6, {label: 'Foursquare'}]
	      // etc...


	    ],

	    // Any of the following properties can be either static values 
	    // or a function that will be called for each data point. 
	    // For functions, 'this' will be set to the current data element, 
	    // just like jQuery's $.each

	    // Bar width in arbitrary units, 1.0 means the bars will be snuggled
	    // up next to each other
	    barWidth: 0.8, 

	    // The label on top of the bar - can contain HTML
	    // formatNumber inserts commas as thousands separators in a number
	    barLabel:  function(index) { 
	      return $.tufteBar.formatNumber(this[0]) + "%"
	    }, 

	    // The label on the x-axis - can contain HTML
	    axisLabel: function(index) { return this[1].label }, 

	    // The color of the bar
	    color:     function(index) { 
	      return ['#A6A411', '#A6A411'][index % 2] 
	    },

	    // Stacked graphs also pass a stackedIndex parameter
	    color:     function(index, stackedIndex) { 
	      return ['#A6A411', '#82293B'][stackedIndex % 2] 
	    },

	    // Alternatively, you can just override the default colors and keep
	    // the built in color functions
	    colors: ['#A6A411', '#E57536', '#FFBE33'],

	    // Legend is optional
	    legend: {
	      // Data can be an array of any type of object, but the default
	      // formatter works with strings
	      

	      // By default, the colors of the graph are used
	      color: function(index) { 
	        return ['#E57536', '#82293B'][index % 2] 
	      },

	      // You can customize the element label - can contain HTML
	      label: function(index) { return this }
	    }
	  });


/*
	$.getScript("schools.json", function(){
		
		var astyle = {
			"color" : "#990000",
			"weight" : 2,
			"opacity" : 1
			
		}
		
		var layer = L.geoJson(schools, {style : astyle}).addTo(window.superSpecialMap);
		
	});
*/
/*
		To Add KML!
		Convert kml file to GeoJSON here

		put your converted file (should be in .json file format)
		duplicate this code with a different variable name and file name of course:

		$.getScript("lines.json", function() {
			var astyle = {
				"color": "#990000",
				"weight": 2,
				"opacity": 1
			}

			var layer = L.geoJson(lines, {
				style: astyle
			}).addTo(window.superSpecialMap);

		})
		*/


//	getFoursquare();
});
